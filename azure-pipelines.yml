trigger:
  batch: false
  branches:
    include:
    - dev
  paths:
    exclude:
    - docs
    - docfx

pool:
  vmImage: 'windows-2019'

variables:
- group: Sleet
- name: SleetVersion
  value: 2.3.33
- name: Configuration
  value: Release

steps:
- task: MSBuild@1
  displayName: Build
  inputs:
    solution: Terminal.sln
    configuration: $(Configuration)
    msbuildArguments: -r -p:PackageOutputPath=$(Build.ArtifactStagingDirectory)

- pwsh: |
    $anyinstalled = (dotnet tool list -g | select-string sleet) -ne $null
    Write-Host "##vso[task.setvariable variable=Sleet.AnyInstalled;]$anyinstalled"

    $sameinstalled = (dotnet tool list -g | select-string sleet | select-string $(SleetVersion)) -ne $null
    Write-Host "##vso[task.setvariable variable=Sleet.SameInstalled;]$sameinstalled"
  displayName: 'Check Sleet installed version'

- task: DotNetCoreCLI@2
  displayName: 'Uninstall Sleet if necessary'
  continueOnError: true
  condition: and(eq(variables['Sleet.AnyInstalled'], 'True'), eq(variables['Sleet.SameInstalled'], 'False'))
  inputs:
    command: custom
    custom: tool
    arguments: 'uninstall -g Sleet'

- task: DotNetCoreCLI@2
  displayName: 'Install Sleet if necessary'
  condition: eq(variables['Sleet.SameInstalled'], 'False')
  inputs:
    command: custom
    custom: tool
    arguments: 'install --global Sleet --version $(SleetVersion)'

- script: 'sleet push --config none $(Build.ArtifactStagingDirectory) -f --verbose -p "SLEET_FEED_CONNECTIONSTRING=$(SLEET_FEED_CONNECTIONSTRING)"'
  displayName: 'Push packages via Sleet'